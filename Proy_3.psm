; *****************************************************************************************************************************
; \navGrpBegin "Directives"
; *****************************************************************************************************************************

	; *************************************************************************************************************************
	; !!! The set directives overwrites the configuration dialog settings !!!
	; *************************************************************************************************************************

	; *************************************************************************************************************************
	;  \navSep "Editor config"
	; *************************************************************************************************************************
		#set editor::tabIndent,							4

	; *************************************************************************************************************************
	; \navSep "Xilinx PicoBlaze core configuration"
	; *************************************************************************************************************************
		#ifDef proc::xPblze6
	
			#set proc::xPblze6::scrpdSize,				64						; [64, 128, 256]
;			#set proc::xPblze6::scrpdioDev,				ioDev::yourDev
			#set proc::xPblze6::intVector,				1023					; [0 to 4095]
			#set proc::xPblze6::clkFreq,				100000000					; in Hz
			
		#elseIf proc::xPblze3
	
;			#set proc::XPblze3::scrpdioDev,				ioDev::yourDev
			#set proc::XPblze3::clkFreq,				100000000					; in Hz
		#endIf
		
	; *************************************************************************************************************************
	;  \navSep "Instruction memory config"
	; *************************************************************************************************************************
		#set instmem::pageSize,							1024
		#set instmem::pageCount,						1
;		#set instmem::sharedMemLocation,				hiMem					; [ hiMem, loMem ]

	; *************************************************************************************************************************
	;  \navSep "ioDevice for instruction memory"
	; *************************************************************************************************************************
		#set ioDev::page0::en,							true					; [ true | false ]
		#set ioDev::page0::type,						mem						; [ mem | fifo | reg ]
		#set ioDev::page0::size,						1024					; Multiple of 2
		#set ioDev::page0::baseAddr,					0x00
		#set ioDev::page0::simEn,						false					; Enabling IO device in simulator
; 		#set ioDev::page0::simAccessMode,				rd						; [ rdWr, rd, wr ]
	
		#set ioDev::page0::initValue,					0x00000					; Initial value
	
;		#set ioDev::page0::value,						0x33, 0x44, 0x55
;		#set ioDev::page0::value,						0x10: 0x33, 0x44, 0x55
;		#set ioDev::page0::value,						0x01: 0x33
;		#set ioDev::page0::value,						0x02: 0x44
; 		#set ioDev::page0::value,						append: 0x33, 0x44, 0x55
; 		#set ioDev::page0::value,						append: 0x66, 0x77, 0x88

		#set ioDev::page0::value,						instMem
;		#set ioDev::page0::value,						instMem[page0]
;		#set ioDev::page0::value,						instMem[0..1023]
;		#set ioDev::page0::value,						instMem[page0][7..0]
;		#set ioDev::page0::value,						instMem[0..1023][7..0]
;		#set ioDev::page0::value,						instMem[1023..0]
	
	
;		#set ioDev::page0::vhdlEn,						true					; Enable/disable vhdl output
;		#set ioDev::page0::vhdlEntityName,				"vhdlPblzeRom"			; VHDL entity name
;		#set ioDev::page0::vhdlTmplFile,				"tmpl.vhd"				; VHDL template file
;		#set ioDev::page0::vhdlTargetFile,				"out.vhd"				; VHDL target file
	
;		#set ioDev::page0::verilogEn,					true					; Enable/disable verilog output
;		#set ioDev::page0::verilogEntityName,			"verilogPblzeRom"		; VHDL entity name
;		#set ioDev::page0::verilogTmplFile,				"tmpl.v"					; VHDL template file
;		#set ioDev::page0::verilogTargetFile,			"out.v"					; VHDL target file
	
		#set ioDev::page0::hexEn,						true					; Enable/disable hex output
		#set ioDev::page0::hexTargetFile,				"instrucciones.hex"				; Hex target file
	
;		#set ioDev::page0::memEn,						true					; Enable/disable mem output
;		#set ioDev::page0::memTargetFile,				"out.mem"				; Mem target file
;		#set ioDev::page0::memGapStuffing,				true					; Mem gap stuffing enable: [ true | false ]

	; *************************************************************************************************************************
	; \navSep "rxFIFO"
	;
	; Setting up a small FIFO for simulation purposes.
	; *************************************************************************************************************************
	
		; rxFIFO data
		#set ioDev::rxFIFO::en,					true					; [ true | false ]
		#set ioDev::rxFIFO::type,				fifo					; [ mem | fifo | reg ]
		#set ioDev::rxFIFO::size,				32						; Multiple of 2
		#set ioDev::rxFIFO::baseAddr,			0x20
		#set ioDev::rxFIFO::simEn,				true					; Enabling IO device in simulator
		#set ioDev::rxFIFO::simAccessMode,		rd						; [ rdWr, rd, wr ]
	
		#set ioDev::rxFIFO::initValue,			0x00000					; Initial value

		#set ioDev::rxFIFO::value,				append: 0x01, 0x89, 0x8d, 0x8a, 0xe7, 0xc0, 0xa0, 0x04
		#set ioDev::rxFIFO::value,				append: 0x01, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x04

	; *************************************************************************************************************************
	; \navHw "Register renaming"
	; *************************************************************************************************************************
		#equ reg_work, 			sF
	
	; *************************************************************************************************************************
	; \navHw "Port addresses"
	; *************************************************************************************************************************
		#equ busAddr_intReg,	0x01
		#equ busAddr_dbg,		0xFF
	
; *****************************************************************************************************************************
; \navGrpEnd
; \navGrpBegin "Sources"
; *****************************************************************************************************************************

; *****************************************************************************************************************************
; Main function
; *****************************************************************************************************************************
	
	;------- Puertos de salida -------
	
	;RTC.
	
	#equ inic, 0x21
	#equ leer, 0x04
	#equ esc_fecha, 0x03
	#equ esc_hora, 0x02
	#equ esc_timer, 0x01
	#equ act_timer, 0x20
	#equ stop_ring, 0x00
	
	#equ dir_com_cyt, 0x13	
	#equ dir_com_c, 0x12
	#equ dir_com_t, 0x11
	
	#equ dir_st0, 0x1F
	#equ dir_st1, 0x1E
	#equ dir_st2, 0x1D
	
	#equ dir_seg, 0x1C
	#equ dir_min, 0x1B
	#equ dir_hora, 0x1A
	#equ dir_dia, 0x19
	#equ dir_mes, 0x18
	#equ dir_anio, 0x17
	#equ dir_tseg, 0x16
	#equ dir_tmin, 0x15
	#equ dir_thora, 0x14
	
	#equ st0_out, 0x10
	#equ st1_out, 0x0F
	#equ st2_out, 0x0E
	
	#equ seg_out, 0x0D
	#equ min_out, 0x0C
	#equ hora_out, 0x0B
	#equ dia_out, 0x0A
	#equ mes_out, 0x09
	#equ anio_out, 0x08
	#equ tseg_out, 0x07
	#equ tmin_out, 0x06
	#equ thora_out, 0x05
	
	;VGA.
	
	#equ vga_seg, 0x2E
	#equ vga_min, 0x2D
	#equ vga_hora, 0x2C
	#equ vga_dia, 0x2B
	#equ vga_mes, 0x2A
	#equ vga_anio, 0x29
	#equ vga_tseg, 0x28
	#equ vga_tmin, 0x27
	#equ vga_thora, 0x26
	
	#equ cursor_tim, 0x25
	#equ cursor_hora, 0x24
	#equ cursor_fecha, 0x23
	
	#equ alarma_on, 0x22
	
	; Teclado.
	
	#equ leido, 0x2f
	
	;Mod_Datos
	
	#equ dato, 0x30 
	#equ tipo, 0x31
	#equ s_r, 0x32
	
	;------- Puertos de entrada -------
	
	;RTC.
	
	#equ seg_in, 0x0A
	#equ min_in, 0x09
	#equ hora_in, 0x08
	#equ dia_in, 0x07
	#equ mes_in, 0x06
	#equ anio_in, 0x05
	#equ tseg_in, 0x04
	#equ tmin_in, 0x03
	#equ thora_in, 0x02
	
	#equ ready, 0x01
	;#equ irq, 0x00
	
	;Teclado.
	
	#equ new_data, 0x0C
	#equ data, 0x0B
	
	;Mod_Datos
	
	#equ dato_mod, 0x0D

main:
	call inic_rtc
	
	lectura:
		call leer_rtc
		
		rdprt s0, new_data; Revisa si hay nuevo dato del teclado.
		comp s0, 0x01
		call z, detect_tecla; Si hay.
	jump lectura; Si no hay.

inic_rtc:
	; Inicializar banderas de control de FSM en 0.
	load s0, 0x00
	wrprt s0, esc_fecha
	wrprt s0, esc_hora
	wrprt s0, esc_timer
	wrprt s0, act_timer
	wrprt s0, stop_ring
	wrprt s0, leido
	wrprt s0, cursor_tim
	wrprt s0, cursor_hora
	wrprt s0, cursor_fecha
	wrprt s0, alarma_on
	; Inicializar valores de las direcciones para el RTC.	
	wrprt s0, dir_st0
	load s0, 0x01
	wrprt s0, dir_st1
	load s0, 0x02
	wrprt s0, dir_st2
	load s0, 0x21
	wrprt s0, dir_seg
	load s0, 0x22
	wrprt s0, dir_min
	load s0, 0x23
	wrprt s0, dir_hora
	load s0, 0x24
	wrprt s0, dir_dia
	load s0, 0x25
	wrprt s0, dir_mes
	load s0, 0x26
	wrprt s0, dir_anio
	load s0, 0x41
	wrprt s0, dir_tseg
	load s0, 0x42
	wrprt s0, dir_tmin
	load s0, 0x43
	wrprt s0, dir_thora
	load s0, 0xF0
	wrprt s0, dir_com_cyt
	load s0, 0xF1
	wrprt s0, dir_com_c
	load s0, 0xF2
	wrprt s0, dir_com_t
	
	; Comienza inicialización RTC.
	
	load s0, 0x10
	wrprt s0, st2_out; Levanta bit de inicialización.
	load s0, 0x01
	wrprt s0, inic; Levanta bandera inic.
	
	esp_ready_alto_i:; Espera que se levante ready.
	rdprt s0, ready
	comp s0, 0x01
	jump nz, esp_ready_alto_i
	
	load s0, 0x00
	wrprt s0, inic; Baja bandera inic.
	
	esp_ready_bajo_i:; Espera que baje ready.
	rdprt s0,ready
	comp s0, 0x01
	jump z, esp_ready_bajo_i
	
	load s0, 0x00
	wrprt s0, st2_out; Baja el bit de inicialización.
	load s0, 0x01
	wrprt s0, inic; Levanta bandera inic.
	
	esp_ready_alto_i2:; Espera que se levante ready.
	rdprt s0, ready
	comp s0, 0x01
	jump nz, esp_ready_alto_i2	
	
	load s0, 0x00
	wrprt s0, inic; Baja bandera inic.
	
	esp_ready_bajo_i2:; Espera que baje ready.
	rdprt s0,ready
	comp s0, 0x01
	jump z, esp_ready_bajo_i2
	
	; Inicializar timer en 00H.
	load s0, 0x00
	wrprt s0, thora_out	
	wrprt s0, tseg_out
	wrprt s0, tmin_out
	call escribir_timer
	
	; Inicializar hora en 00H.
	load s0, 0x00
	wrprt s0, hora_out	
	wrprt s0, seg_out
	wrprt s0, min_out
	call escribir_hora

	; Inicializar fecha en 00H.
	load s0, 0x00
	wrprt s0, anio_out	
	wrprt s0, dia_out
	wrprt s0, mes_out
	call escribir_fecha
ret; Vuelve a main.

leer_rtc:
	load s0, 0x01
	wrprt s0, leer; Levanta bandera leer.
	
	esp_ready_alto_l:; Espera que se levante ready.
	rdprt s0, ready
	comp s0, 0x01
	jump nz, esp_ready_alto_l	
	
	load s0, 0x00
	wrprt s0, leer; Baja bandera leer.

	esp_ready_bajo_l:; Espera que baje ready.
	rdprt s0,ready
	comp s0, 0x01
	jump z, esp_ready_bajo_l
	; Lee los datos actuales del RTC y los guarda en registros.	
	rdprt s1, seg_in
	rdprt s2, min_in
	rdprt s3, hora_in
	rdprt s4, dia_in
	rdprt s5, mes_in
	rdprt s6, anio_in
	rdprt s7, tseg_in
	rdprt s8, tmin_in
	rdprt s9, thora_in
		
	comp s7, 0x59
	jump nz, siga
	comp s8, 0x59
	jump nz, siga
	comp s9, 0x23
	jump nz, siga
	call parar_timer
	
	siga:
	; Escritura de los datos leídos en la VGA.
	wrprt s1, vga_seg
	wrprt s2, vga_min
	wrprt s3, vga_hora
	wrprt s4, vga_dia
	wrprt s5, vga_mes
	wrprt s6, vga_anio
	wrprt s7, vga_tseg
	wrprt s8, vga_tmin
	wrprt s9, vga_thora
ret ; Vuelve a main.

detect_tecla:; Identifica cuál tecla se presionó y llama a la subrutina que corresponda.
	load s0, 0x01
	wrprt s0, leido; Levanta leído para bajar new_data.
	
	rdprt s7, data; Lee el dato del teclado.
	comp s7, 0x2B; Letra F
	call z, programar_fecha
	comp s7, 0x33; Letra H
	call z, programar_hora
	comp s7, 0x2C; Letra T
	call z, programar_timer
	comp s7, 0x5A; Enter
	call z, activar_timer
	comp s7, 0x76; ESC
	call z, parar_ring

	load s0, 0x00
	wrprt s0, leido; Baja leído para poder recibir otro dato del teclado.
ret; Vuelve a main.

escribir_fecha:
	load s0, 0x01
	wrprt s0, esc_fecha; Levanta bandera esc_fecha.
	
	esp_ready_alto_ef:; Espera que se levante ready.
	rdprt s0, ready
	comp s0, 0x01
	jump nz, esp_ready_alto_ef
	
	load s0, 0x00
	wrprt s0, esc_fecha; Baja bandera esc_fecha.
	
	esp_ready_bajo_ef:; Espera que baje ready.
	rdprt s0,ready
	comp s0, 0x01
	jump z, esp_ready_bajo_ef
ret; Regreso.

escribir_hora:
	load s0, 0x01
	wrprt s0, esc_hora; Levanta bandera esc_hora.
	
	esp_ready_alto_eh:; Espera que se levante ready.
	rdprt s0, ready
	comp s0, 0x01
	jump nz, esp_ready_alto_eh
	
	load s0, 0x00
	wrprt s0, esc_hora; Baja bandera esc_hora.
	
	esp_ready_bajo_eh:; Espera que baje ready.
	rdprt s0,ready
	comp s0, 0x01
	jump z, esp_ready_bajo_eh
ret; Regreso.

escribir_timer:
	load s0, 0x01
	wrprt s0, esc_timer; Levanta bandera esc_timer.
	
	esp_ready_alto_et:; Espera que se levante ready.
	rdprt s0, ready
	comp s0, 0x01
	jump nz, esp_ready_alto_et
	
	load s0, 0x00
	wrprt s0, esc_timer; Baja bandera esc_timer.
	
	esp_ready_bajo_et:; Espera que baje ready.
	rdprt s0,ready
	comp s0, 0x01
	jump z, esp_ready_bajo_et
ret; Regreso.

programar_fecha:
	;-------
	;;;;;;;;
	lazo_dia:; Apunta dia y guarda su dato actual en s8.
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x04;posicion del cursor
	wrprt s0, cursor_fecha; Activa cursor dia.
	rdprt s8, dia_in; Guarda en s8 el dato actual de dia.
	;;;;;;;;
	lazo0_dia:; Sale de este ciclo hasta que haya nuevo dato del teclado.
	rdprt s0, new_data
	comp s0, 0x01
	jump nz, lazo0_dia

	load s0, 0x01
	wrprt s0, leido
	; Detecta alguna de las flechas o la tecla F de nuevo.
	rdprt s1, data
	comp s1, 0x2B; Tecla F.
	jump z, salir_fecha; Salir de programar fecha.
	comp s1, 0x74; Flecha derecha.
	jump z, lazo_mes
	comp s1, 0x6B;  Flecha izquierda.
	jump z, lazo_anio
	comp s1, 0x75; Flecha arriba.
	jump z, lazo1_dia
	comp s1, 0x72; Flecha abajo.
	jump z, lazo2_dia
	
	load s0, 0x00
	wrprt s0, leido
	
	jump lazo0_dia; Si no es ninguna de esas teclas vuelve a esperar teclazo.
	;;;;;;;;
	lazo1_dia:; Este incrementa en 1 el dato actual y lo envia a VGA y a RTC.
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x01
	wrprt s0, s_r; s_r en 1 = suma.
	jump lazo3_dia
	;;;;;;;;
	lazo2_dia:; Este disminuye en 1 el dato actual y lo envia a VGA y a RTC.
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x00
	wrprt s0, s_r; s_r en 0 = resta.
	jump lazo3_dia
	;;;;;;;;
	lazo3_dia:
	load s0, b00100
	wrprt s0, tipo; máx = 31 (dia).
	wrprt s8, dato; Envía el dato actual al módulo de suma/resta.
	rdprt s8, dato_mod; Recibe el dato modificado y lo guarda en el mismo registro.
	wrprt s8, dia_out; Escribe el nuevo dato en RTC.
	wrprt s8, vga_dia; Escribe el nuevo dato en VGA.
	jump lazo0_dia; Vuelve a esperar teclazo.
	;;;;;;;;
	;-------
	
	;-------
	;;;;;;;;
	lazo_mes:; Apunta mes y guarda su dato actual en s9.
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x02;posicion del cursor
	wrprt s0, cursor_fecha; Activa cursor mes.
	rdprt s9, mes_in; Guarda en s9 el dato actual de mes.
	;;;;;;;;
	lazo0_mes: ;Sale de este ciclo hasta que haya nuevo dato del teclado
	rdprt s0, new_data
	comp s0, 0x01
	jump nz, lazo0_mes
	
	load s0, 0x01
	wrprt s0, leido
	; Detecta alguna de las flechas o la tecla F de nuevo.
	rdprt s1, data
	comp s1, 0x2B ; Tecla F
	jump z, salir_fecha ;Salir de programar fecha
	comp s1, 0x74 ;Flecha derecha
	jump z, lazo_anio
	comp s1, 0x6B ;Flecha izquierda
	jump z, lazo_dia
	comp s1, 0x75 ;Flecha arriba
	jump z, lazo1_mes
	comp s1, 0x72 ;Flecha abajo
	jump z, lazo2_mes
	
	load s0, 0x00
	wrprt s0, leido
	
	jump lazo0_mes ;Si no es ninguna de esas teclas vuelve a esperar teclazo
	;;;;;;;;
	lazo1_mes: ;Este incrementa en 1 el dato actual y lo envia a VGA y a RTC
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x01
	wrprt s0, s_r ; s_r en 1 = suma
	jump lazo3_mes
	;;;;;;;;
	lazo2_mes: ;Este disminuye en 1 el dato actual y lo envia a VGA y a RTC
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x00
	wrprt s0, s_r ; s_r en 0 = resta
	jump lazo3_mes
	;;;;;;;;
	lazo3_mes:
	load s0, b00001
	wrprt s0, tipo ;máx = 12 (mes).
	wrprt s9, dato ;Envía el dato actual al módulo de suma/resta.
	rdprt s9, dato_mod; Recibe el dato modificado y lo guarda en el mismo registro.
	wrprt s9, mes_out; Escribe el nuevo dato en RTC.
	wrprt s9, vga_mes; Escribe el nuevo dato en VGA.
	jump lazo0_mes; Vuelve a esperar teclazo.
	;;;;;;;;
	;-------
	
	;;;;;;;;
	;-------
	lazo_anio:; Apunta año y guarda su dato actual en sA.
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x01 ;posicion del cursor
	wrprt s0, cursor_fecha ; Activa cursor año.
	rdprt sA, anio_in ; Guarda en sA el dato actual de año.
	;;;;;;;;
	lazo0_anio: ;Sale de este ciclo hasta que haya nuevo dato del teclado
	rdprt s0, new_data
	comp s0, 0x01
	jump nz, lazo0_anio

	load s0, 0x01
	wrprt s0, leido
	; Detecta alguna de las flechas o la tecla F de nuevo.
	rdprt s1, data
	comp s1, 0x2B ;Tecla F 
	jump z, salir_fecha
	comp s1, 0x74 ;Flecha derecha
	jump z, lazo_dia
	comp s1, 0x6B ;Flecha izquierda
	jump z, lazo_mes
	comp s1, 0x75 ;Flecha arriba
	jump z, lazo1_anio
	comp s1, 0x72 ;Flecha abajo
	jump z, lazo2_anio	
	
	load s0, 0x00
	wrprt s0, leido	
	
	jump lazo0_anio ;Si no es ninguna de esas teclas vuelve a esperar teclazo
	;;;;;;;;
	lazo1_anio: ;Este incrementa en 1 el dato actual y lo envia a VGA y a RTC
	load s0, 0x00
	wrprt s0, leido

	load s0, 0x01
	wrprt s0, s_r ; s_r en 1 = suma
	jump lazo3_anio
	;;;;;;;;
	lazo2_anio: ;Este disminuye en 1 el dato actual y lo envia a VGA y a RTC
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x00
	wrprt s0, s_r ; s_r en 0 = resta
	jump lazo3_anio
	;;;;;;;;
	lazo3_anio:
	load s0, b10000
	wrprt s0, tipo ;máx = 99 (año).
	wrprt sA, dato ;Envía el dato actual al módulo de suma/resta.
	rdprt sA, dato_mod; Recibe el dato modificado y lo guarda en el mismo registro.
	wrprt sA, anio_out; Escribe el nuevo dato en RTC.
	wrprt sA, vga_anio; Escribe el nuevo dato en VGA.
	jump lazo0_anio; Vuelve a esperar teclazo.
	;;;;;;;;
	;-------
	
	;;;;;;;;
	;-------
	salir_fecha:
	load s0, 0x00
	wrprt s0, cursor_fecha; Desactiva cursor.
	
	load s0, 0x00
	wrprt s0, leido
	
	call escribir_fecha; Escribe en RTC los datos modificados.
ret

programar_hora:
	;-------
	;;;;;;;;
	lazo_hora:; Apunta hora y guarda su dato actual en s5.
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x04;posicion del cursor
	wrprt s0, cursor_hora; Activa cursor hora.
	rdprt s5, hora_in; Guarda en s5 el dato actual de hora.
	;;;;;;;;
	lazo0_hora:; Sale de este ciclo hasta que haya nuevo dato del teclado.
	rdprt s0, new_data
	comp s0, 0x01
	jump nz, lazo0_hora

	load s0, 0x01
	wrprt s0, leido
	; Detecta alguna de las flechas o la tecla H de nuevo.
	rdprt s1, data
	comp s1, 0x33; Tecla H.
	jump z, salir_hora; Salir de programar hora.
	comp s1, 0x74; Flecha derecha.
	jump z, lazo_min
	comp s1, 0x6B;  Flecha izquierda.
	jump z, lazo_seg
	comp s1, 0x75; Flecha arriba.
	jump z, lazo1_hora
	comp s1, 0x72; Flecha abajo.
	jump z, lazo2_hora
	
	load s0, 0x00
	wrprt s0, leido
	
	jump lazo0_hora; Si no es ninguna de esas teclas vuelve a esperar teclazo.
	;;;;;;;;
	lazo1_hora:; Este incrementa en 1 el dato actual y lo envia a VGA y a RTC.
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x01
	wrprt s0, s_r; s_r en 1 = suma.
	jump lazo3_hora
	;;;;;;;;
	lazo2_hora:; Este disminuye en 1 el dato actual y lo envia a VGA y a RTC.
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x00
	wrprt s0, s_r; s_r en 0 = resta.
	jump lazo3_hora
	;;;;;;;;
	lazo3_hora:
	load s0, b00010
	wrprt s0, tipo; máx = 23 (hora).
	wrprt s5, dato; Envía el dato actual al módulo de suma/resta.
	rdprt s5, dato_mod; Recibe el dato modificado y lo guarda en el mismo registro.
	wrprt s5, hora_out; Escribe el nuevo dato en RTC.
	wrprt s5, vga_hora; Escribe el nuevo dato en VGA.
	jump lazo0_hora; Vuelve a esperar teclazo.
	;;;;;;;;
	;-------
	
	;-------
	;;;;;;;;
	lazo_min:; Apunta min y guarda su dato actual en s6.
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x02;posicion del cursor
	wrprt s0, cursor_hora; Activa cursor min.
	rdprt s6, min_in; Guarda en s6 el dato actual de min.
	;;;;;;;;
	lazo0_min: ;Sale de este ciclo hasta que haya nuevo dato del teclado
	rdprt s0, new_data
	comp s0, 0x01
	jump nz, lazo0_min
	
	load s0, 0x01
	wrprt s0, leido
	; Detecta alguna de las flechas o la tecla H de nuevo.
	rdprt s1, data
	comp s1, 0x33 ; Tecla H
	jump z, salir_hora ;Salir de programar hora
	comp s1, 0x74 ;Flecha derecha
	jump z, lazo_seg
	comp s1, 0x6B ;Flecha izquierda
	jump z, lazo_hora
	comp s1, 0x75 ;Flecha arriba
	jump z, lazo1_min
	comp s1, 0x72 ;Flecha abajo
	jump z, lazo2_min
	
	load s0, 0x00
	wrprt s0, leido
	
	jump lazo0_min ;Si no es ninguna de esas teclas vuelve a esperar teclazo
	;;;;;;;;
	lazo1_min: ;Este incrementa en 1 el dato actual y lo envia a VGA y a RTC
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x01
	wrprt s0, s_r ; s_r en 1 = suma
	jump lazo3_min
	;;;;;;;;
	lazo2_min: ;Este disminuye en 1 el dato actual y lo envia a VGA y a RTC
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x00
	wrprt s0, s_r ; s_r en 0 = resta
	jump lazo3_min
	;;;;;;;;
	lazo3_min:
	load s0, b01000
	wrprt s0, tipo ;máx = 59 (min).
	wrprt s6, dato ;Envía el dato actual al módulo de suma/resta.
	rdprt s6, dato_mod; Recibe el dato modificado y lo guarda en el mismo registro.
	wrprt s6, min_out; Escribe el nuevo dato en RTC.
	wrprt s6, vga_min; Escribe el nuevo dato en VGA.
	jump lazo0_min; Vuelve a esperar teclazo.
	;;;;;;;;
	;-------
	
	;;;;;;;;
	;-------
	lazo_seg:; Apunta seg y guarda su dato actual en s7.
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x01 ;posicion del cursor
	wrprt s0, cursor_hora ; Activa cursor seg.
	rdprt s7, seg_in ; Guarda en s7 el dato actual de seg.
	;;;;;;;;
	lazo0_seg: ;Sale de este ciclo hasta que haya nuevo dato del teclado
	rdprt s0, new_data
	comp s0, 0x01
	jump nz, lazo0_seg

	load s0, 0x01
	wrprt s0, leido
	; Detecta alguna de las flechas o la tecla H de nuevo.
	rdprt s1, data
	comp s1, 0x33 ;Tecla H 
	jump z, salir_hora; Salir de programar hora
	comp s1, 0x74 ;Flecha derecha
	jump z, lazo_hora
	comp s1, 0x6B ;Flecha izquierda
	jump z, lazo_min
	comp s1, 0x75 ;Flecha arriba
	jump z, lazo1_seg
	comp s1, 0x72 ;Flecha abajo
	jump z, lazo2_seg	
	
	load s0, 0x00
	wrprt s0, leido	
	
	jump lazo0_seg ;Si no es ninguna de esas teclas vuelve a esperar teclazo
	;;;;;;;;
	lazo1_seg: ;Este incrementa en 1 el dato actual y lo envia a VGA y a RTC
	load s0, 0x00
	wrprt s0, leido

	load s0, 0x01
	wrprt s0, s_r ; s_r en 1 = suma
	jump lazo3_seg
	;;;;;;;;
	lazo2_seg: ;Este disminuye en 1 el dato actual y lo envia a VGA y a RTC
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x00
	wrprt s0, s_r ; s_r en 0 = resta
	jump lazo3_seg
	;;;;;;;;
	lazo3_seg:
	load s0, b01000
	wrprt s0, tipo ;máx = 59 (seg).
	wrprt s7, dato ;Envía el dato actual al módulo de suma/resta.
	rdprt s7, dato_mod; Recibe el dato modificado y lo guarda en el mismo registro.
	wrprt s7, seg_out; Escribe el nuevo dato en RTC.
	wrprt s7, vga_seg; Escribe el nuevo dato en VGA.
	jump lazo0_seg; Vuelve a esperar teclazo.
	;;;;;;;;
	;-------
	
	;;;;;;;;
	;-------
	salir_hora:
	load s0, 0x00
	wrprt s0, cursor_hora; Desactiva cursor.
	
	load s0, 0x00
	wrprt s0, leido
	
	call escribir_hora; Escribe en RTC los datos modificados.
ret

programar_timer:
	;-------
	;;;;;;;;
	lazo_thora:; Apunta thora y guarda su dato actual en s2.
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x04
	wrprt s0, cursor_tim; Activa cursor thora.
	rdprt s2, thora_in; Guarda en s2 el dato actual de thora.
	;;;;;;;;
	lazo0_thora:; Sale de este ciclo hasta que haya nuevo dato del teclado.
	rdprt s0, new_data
	comp s0, 0x01
	jump nz, lazo0_thora

	load s0, 0x01
	wrprt s0, leido
	; Detecta alguna de las flechas o la tecla T de nuevo.
	rdprt s1, data
	comp s1, 0x2C; Tecla T.
	jump z, salir_timer; Salir de programar timer.
	comp s1, 0x74; Flecha derecha.
	jump z, lazo_tmin
	comp s1, 0x6B;  Flecha izquierda.
	jump z, lazo_tseg
	comp s1, 0x75; Flecha arriba.
	jump z, lazo1_thora
	comp s1, 0x72; Flecha abajo.
	jump z, lazo2_thora
	
	load s0, 0x00
	wrprt s0, leido
	
	jump lazo0_thora; Si no es ninguna de esas teclas vuelve a esperar teclazo.
	;;;;;;;;
	lazo1_thora:; Este incrementa en 1 el dato actual y lo envia a VGA y a RTC.
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x01
	wrprt s0, s_r; s_r en 1 = suma.
	jump lazo3_thora
	;;;;;;;;
	lazo2_thora:; Este disminuye en 1 el dato actual y lo envia a VGA y a RTC.
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x00
	wrprt s0, s_r; s_r en 0 = resta.
	jump lazo3_thora
	;;;;;;;;
	lazo3_thora:
	load s0, b00010
	wrprt s0, tipo; máx = 23 (hora).
	wrprt s2, dato; Envía el dato actual al módulo de suma/resta.
	rdprt s2, dato_mod; Recibe el dato modificado y lo guarda en el mismo registro.
	wrprt s2, thora_out; Escribe el nuevo dato en RTC.
	wrprt s2, vga_thora; Escribe el nuevo dato en VGA.
	jump lazo0_thora; Vuelve a esperar teclazo.
	;;;;;;;;
	;-------
	
	;-------
	;;;;;;;;
	lazo_tmin:; Apunta tmin y guarda su dato actual en s3.
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x02
	wrprt s0, cursor_tim
	rdprt s3, tmin_in
	;;;;;;;;
	lazo0_tmin:
	rdprt s0, new_data
	comp s0, 0x01
	jump nz, lazo0_tmin
	
	load s0, 0x01
	wrprt s0, leido

	rdprt s1, data
	comp s1, 0x2C
	jump z, salir_timer
	comp s1, 0x74
	jump z, lazo_tseg
	comp s1, 0x6B
	jump z, lazo_thora
	comp s1, 0x75
	jump z, lazo1_tmin
	comp s1, 0x72
	jump z, lazo2_tmin
	
	load s0, 0x00
	wrprt s0, leido
	
	jump lazo0_tmin
	;;;;;;;;
	lazo1_tmin:
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x01
	wrprt s0, s_r
	jump lazo3_tmin
	;;;;;;;;
	lazo2_tmin:
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x00
	wrprt s0, s_r
	jump lazo3_tmin
	;;;;;;;;
	lazo3_tmin:
	load s0, b01000
	wrprt s0, tipo; máx = 59 (min).
	wrprt s3, dato
	rdprt s3, dato_mod
	wrprt s3, tmin_out
	wrprt s3, vga_tmin
	jump lazo0_tmin
	;;;;;;;;
	;-------
	
	;;;;;;;;
	;-------
	lazo_tseg:; Apunta tseg y guarda su dato actual en s4.
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x01
	wrprt s0, cursor_tim
	rdprt s4, tseg_in
	;;;;;;;;
	lazo0_tseg:
	rdprt s0, new_data
	comp s0, 0x01
	jump nz, lazo0_tseg

	load s0, 0x01
	wrprt s0, leido
	
	rdprt s1, data
	comp s1, 0x2C
	jump z, salir_timer
	comp s1, 0x74
	jump z, lazo_thora
	comp s1, 0x6B
	jump z, lazo_tmin
	comp s1, 0x75
	jump z, lazo1_tseg
	comp s1, 0x72
	jump z, lazo2_tseg	
	
	load s0, 0x00
	wrprt s0, leido	
	jump lazo0_tseg
	;;;;;;;;
	lazo1_tseg:
	load s0, 0x00
	wrprt s0, leido

	load s0, 0x01
	wrprt s0, s_r
	jump lazo3_tseg
	;;;;;;;;
	lazo2_tseg:
	load s0, 0x00
	wrprt s0, leido
	
	load s0, 0x00
	wrprt s0, s_r
	jump lazo3_tseg
	;;;;;;;;
	lazo3_tseg:
	load s0, b01000
	wrprt s0, tipo; máx = 59 (seg).
	wrprt s4, dato
	rdprt s4, dato_mod
	wrprt s4, tseg_out
	wrprt s4, vga_tseg
	jump lazo0_tseg
	;;;;;;;;
	;-------
	
	;;;;;;;;
	;-------
	salir_timer:
	load s0, 0x00
	wrprt s0, cursor_tim; Desactiva cursor.
	
	load s0, 0x00
	wrprt s0, leido
	
	call escribir_timer; Escribe en RTC los datos modificados.
ret; Vuelve a detect_tecla.

activar_timer:
	; Levanta bits para escribir que activan el timer.
	load s0, 0x04
	wrprt s0, st1_out
	load s0, 0x08
	wrprt s0, st0_out
	
	load s0, 0x01
	wrprt s0, act_timer; Levanta bandera act_timer.
	
	esp_ready_alto_at:; Espera que se levante el ready.
	rdprt s0, ready
	comp s0, 0x01
	jump nz, esp_ready_alto_at	
	
	load s0, 0x00
	wrprt s0, act_timer; Baja bandera act_timer.

	esp_ready_bajo_at:; Espera que baje el ready (asegurarse que quede en estado 0 la FSM).
	rdprt s0,ready
	comp s0, 0x01
	jump z, esp_ready_bajo_at
	
	load s0, 0x00
	wrprt s0, leido
ret; Vuelve a detect_tecla.

parar_timer:
	load s0, 0x01
	wrprt s0, alarma_on
	
	load s0, 0x00
	wrprt s0, st1_out
	load s0, 0x00
	wrprt s0, st0_out
	
	load s0, 0x01
	wrprt s0, act_timer
	
	esp_ready_alto_pt:
	rdprt s0, ready
	comp s0, 0x01
	jump nz, esp_ready_alto_pt	
	
	load s0, 0x00
	wrprt s0, act_timer

	esp_ready_bajo_pt:
	rdprt s0,ready
	comp s0, 0x01
	jump z, esp_ready_bajo_pt
	
	; Inicializar timer en 00H.

	load s0, 0x00
	wrprt s0, thora_out	
	wrprt s0, tseg_out
	wrprt s0, tmin_out
	call escribir_timer
	;load s0, 0x01
	;wrprt s0, esc_timer
	
	;esp_ready_alto_it2:
	;rdprt s0, ready
	;comp s0, 0x01
	;jump nz, esp_ready_alto_it2
	
	;load s0, 0x00
	;wrprt s0, esc_timer
	
	;esp_ready_bajo_it2:
	;rdprt s0,ready
	;comp s0, 0x01
	;jump z, esp_ready_bajo_it2
	
	; Para no mostrar 23:59:59 en timer.
	load s7, 0x00
	load s8, 0x00
	load s9, 0x00
ret; Vuelve a detect_tecla.

parar_ring:
	load s0, 0x00
	wrprt s0, alarma_on; Apaga alarma_on de la VGA.
	
	load s0, 0x00
	wrprt s0, leido
ret; Vuelve a detect_tecla.

;jump main ; provisional
		
	
	;				int		enable

					; Do your staff here

	;mainLoop: 		jump	mainLoop
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
; *****************************************************************************************************************************
; Interrupt service routine
; *****************************************************************************************************************************
isr:

					rdPrt	reg_work,	busAddr_intReg
					wrPrt	reg_work,	busAddr_dbg

					
					; Do your staff here
					
					retI	enable

					#org	addr,		0x3FF
					jump	isr
					
; *****************************************************************************************************************************
; \navGrpEnd
; *****************************************************************************************************************************